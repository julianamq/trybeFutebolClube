import { expect } from "chai";
import sinon from "sinon";
import chaiHttp from "chai-http";
import { SinonStub } from "sinon";
import LoginController from "../controller/LoginController";
import LoginService from "../service/LoginService";
import { Request, Response } from "express";

chai.use(chaiHttp);
describe("Login", () => {
  it("should return a 401 status and message if login fails", async () => {
    const req = {} as Request;
    req.body = {};
    const res = {
      status: sinon.stub().returnsThis(),
      json: sinon.stub(),
    } as Response;

    sandbox
      .stub(LoginService, "Login")
      .resolves({ type: true, message: "Invalid credentials" });

    await LoginController.Login(req, res);

    expect(res.status.calledWith(401)).to.be.true;
    expect(res.json.calledWith({ message: "Invalid credentials" })).to.be.true;
  });
  it("should return a 200 status and token if login succeeds", async () => {
    const req = {} as Request;
    req.body = {};
    const res = {
      status: sinon.stub().returnsThis(),
      json: sinon.stub(),
    } as Response;

    sandbox
      .stub(LoginService, "Login")
      .resolves({ type: false, message: "token" });

    await LoginController.Login(req, res);

    expect(res.status.calledWith(200)).to.be.true;
    expect(res.json.calledWith({ token: "token" })).to.be.true;
  });
});
describe("validate", () => {
  it("should return a 200 status and role", async () => {
    const req = {} as Request;
    req.body = { user: { data: { role: "admin" } } };
    const res = {
      status: sinon.stub().returnsThis(),
      json: sinon.stub(),
    } as Response;

    await LoginController.validate(req, res);

    expect(res.status.calledWith(200)).to.be.true;
    expect(res.json.calledWith({ role: "admin" })).to.be.true;
  });
});
